{{ if .Values.spec.kubecleanup.enabled -}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kubecleanup
  namespace: argocd

spec:
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
      - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
      - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
      - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
      - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy
  destination:
    namespace: {{ .Values.spec.destination.project }}
    server: {{ .Values.spec.destination.server }}
  project: {{.Values.spec.destination.project}}

  source:
    chart: kube-cleanup-operator
    repoURL:  "https://tools.standardbank.co.za/nexus/repository/charts-lwolf/"
    targetRevision: 1.0.1
    helm:
      values: |
        replicas: 1

        image:
          repository: quay.io/lwolf/kube-cleanup-operator
          pullPolicy: IfNotPresent

        ## Additional labels and annotations for the deployment resource
        ##
        labels: {}
        annotations: {}

        ## Additional labels and annotations for the pods
        podLabels: {}
        podAnnotations: {}

        service:
          type: ClusterIP
          port: 80

          ## Additional labels and annotations for the service
          annotations: {}
          # prometheus.io/scrape: "true"
          # prometheus.io/port: "7000"
          labels: {}

        ## Resources to allocate to the pods
        ##
        resources:
          limits:
            cpu: 50m
            memory: 64Mi
          requests:
            cpu: 50m
            memory: 64Mi

        ## Deployment strategy
        ##
        strategy:
          type: RollingUpdate

        ## Liveness and Readiness probes
        ##
        livenessProbe:
          httpGet:
            path: /metrics
            port: 7000

        readinessProbe:
          httpGet:
            path: /metrics
            port: 7000
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          periodSeconds: 30

        ## Node labels for pod assignment
        ## ref: https://kubernetes.io/docs/user-guide/node-selection/
        #
        nodeSelector:
          role: add-ons-platform

        ## Tolerations for pod assignment
        ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
        ##
        tolerations:
          - key: "addOnsPlatform"
            operator: "Exists"
            effect: "NoSchedule"





        ## Affinity for pod assignment
        ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
        ##
        affinity: {}

        ## Set the security context of the pods
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context
        ##
        securityContext:
        # runAsUser: 65534  # run as nobody user

        serviceAccount:
          # Specifies whether a ServiceAccount should be created
          create: true
          # The name of the ServiceAccount to use.
          # If not set and create is true, a name is generated using the fullname template
        #    name: kubecleanup-kube-cleanup-operator

        rbac:
          # Specifies whether RBAC resources should be created
          create: true
          # Specifies whether RBAC should be cluster-wide or limited to namespace
          global: false

        ## Arguments for kube-cleanup-operator
        ##
        args:
          #     - --namespace=default
          - --delete-successful-after=120m
          - --delete-failed-after=120m
          #     - --delete-pending-pods-after=60m
          - --delete-evicted-pods-after=60m
          - --delete-orphaned-pods-after=60m
          - --legacy-mode=false

        ## Environment variables for the container
        ##
        envVariables: []


        ## Manage a ServiceMonitor resource to automatically configure the endpoint
        ## through the Prometheus operator: https://github.com/coreos/prometheus-operator
        serviceMonitor:
          enabled: true
          scrapeInterval: 10s

          ## Additional labels and annotations for the service monitor
          annotations: {}
          labels: {}


  {{- end }}
